#!/usr/bin/env python2

import imaplib
import smtplib
from email.parser import Parser
import argparse
import sh
import os
import logging
import sys
import time
import threading
import signal
import re
import ConfigParser
import mimetypes
from email.mime.multipart import MIMEMultipart
from email import encoders
from email.message import Message
from email.mime.base import MIMEBase
from email.MIMEText import MIMEText
import tarfile

CONFIGNAME = "/etc/malipat.config"
PATCHNAME = "malipat.patch"
REPOSPATH = "/tmp/malipat/"
CHECKPATCHLOG = "/tmp/malipat/checkpatch.log"
APPLYPATCHLOG = "/tmp/malipat/applypatch.log"
BUILDPATCHLOG = "/tmp/malipat/buildpatch.log"
TESTPATCHLOG = "/tmp/malipat/testpatch.log"
LOGSTAR = "/tmp/malipat/logs.tar.gz"

CHECKPATCHCMD = "/usr/src/kernels/4.2.6-301.fc23.x86_64/scripts/checkpatch.pl"
FPASTECMD = "/usr/bin/fpaste"

class pushd:
	_saved_dir = None
	def __enter__(self):
		self._saved_dir = os.getcwd()

	def __exit__(self, type, value, traceback):
		os.chdir(self._saved_dir)

class Tester(threading.Thread):
	def __init__(self, argv):
		threading.Thread.__init__(self)
		self._stop = threading.Event()

		desc = 'Automatically test new patches from the mailing list.'
		parser = argparse.ArgumentParser(description=desc)
		parser.add_argument('-u', '--user',
			help = "Imap username. I.e. user@gmail.com.")
		parser.add_argument('-p', '--passwd',
			help = "Imap password.")
		parser.add_argument('-r', '--repo',
			help = "Where to get repo.")
		parser.add_argument('-t', '--timeout',
			help = "Timeout before checking the mail.")
		parser.add_argument('--prefix',
			help = "Prefix that is being added by a mailing list. I.e. [arch-dev-public].")
		parser.add_argument('--report-to',
			help = "Where to send fail-reports about patches.(reply to all by default)")
		parser.add_argument('-c', '--config', default = CONFIGNAME,
			help = "Path to malipat config file.")
		parser.add_argument('-s', '--signature',
			help = "Text to add at the end of report email.")
		parser.add_argument('-d', '--debug', default = False, action = 'store_true',
			help = "Debug output.")

		opts = vars(parser.parse_args(argv[1:]))

		if os.path.isfile(opts['config']):
			config = ConfigParser.ConfigParser()
			config.read(opts['config'])

			# Config has lower priority than cmdline.
			for opt in config.options('General'):
				val = config.get('General', opt)

				if opt == 'timeout':
					val = int(val)

				if opt == 'debug':
					if val == 'True':
						val = True
					else:
						val = False

				setattr(self, opt, val)

		for opt in opts:
			if opts[opt]:
				setattr(self, opt, opts[opt])

		if not self.timeout:
			self.timeout = 5

		#FIXME
		self.report_to = None

		# Check for essentials 
		if not self.user:
			raise Exception("User is not specified")

		if not self.passwd:
			raise Exception("Password is not specified.")

		if not self.repo:
			raise Exception("Repository is not specified.")

		if self.debug:
			level = logging.DEBUG
		else:
			level = logging.WARNING

		logging.basicConfig(level=level)
		self.logger = logging.getLogger("Tester_%s_%s"%(self.user, self.repo))
		logging.getLogger("sh").setLevel(logging.WARNING)

		self._patches = {}
		self._patch = ""
		self._msg = ""

	def _login(self):
		self.mail = imaplib.IMAP4_SSL('imap.gmail.com')
		self.logger.info('Login as %s', self.user)
		self.mail.login(self.user, self.passwd)
		self.mail.select()
		self.logger.info('Login successful')

	def _logout(self):
		self.mail.close()
		self.mail.logout()
		self.logger.info('Logout successful')

	def _repo_update(self):
		with pushd():
			os.chdir(self.repo)
			sh.git("pull")

	def _send_email(self, to, msg):
		smtp = smtplib.SMTP('smtp.gmail.com:587')
		smtp.starttls()
		smtp.login(self.user, self.passwd)
		smtp.sendmail(self.user, to, msg)
		smtp.quit()

	def _send_report(self, success):
		msg = MIMEMultipart()
		msg['From'] = "Malipat <"+self.user+">"

		headers = Parser().parsestr(self._patch)

		to = ""
		if self.report_to:
			msg['To'] = "%s" % self.report_to
			to = self.report_to
		else:
			msg['To'] = "%s, %s" % (headers['to'], headers['from'])
			if headers['cc']:
				msg['Cc'] = "%s" % headers['cc']
			#to = headers["from"]
			to = ("%s, %s" %(headers['to'], headers['from'])).split(",")

		msg['In-Reply-To'] = "%s" % headers['message-id']
		msg['Subject'] = "Re: %s" % headers['subject']

		msg.attach(MIMEText(self._msg + ("\nSUCCESS\n" if success else "\nFAIL\n") + self.signature.decode('string_escape')))

		self._create_tar()

		ctype, encoding = mimetypes.guess_type(LOGSTAR)
		if ctype is None or encoding is not None:
			ctype = "application/octet-stream"

		maintype, subtype = ctype.split("/", 1)

		fp = open(LOGSTAR, "rb")
		attachment = MIMEBase(maintype, subtype)
		attachment.set_payload(fp.read())
		fp.close()
		encoders.encode_base64(attachment)

		attachment.add_header("Content-Disposition", "attachment", filename=os.path.basename(LOGSTAR))
		msg.attach(attachment)

		self.logger.debug(msg)

		self._send_email(to, msg.as_string())

	def _repo_prepare(self):
		self._repo_update()

		if not os.path.exists(REPOSPATH):
			os.makedirs(REPOSPATH)

		os.chdir(REPOSPATH)

		reponame = os.path.basename(self.repo)

		if os.path.exists(reponame):
			sh.rm("-rf", reponame)

		sh.cp("-a", self.repo, reponame)

		os.chdir(reponame)

	def _create_patchfile(self):
		with open(PATCHNAME, "w+") as f:
			lines = self._patch.split("\r\n")
			for line in lines:
				f.write(line+"\n")

	def _clear_logs(self):
		def rm_if_exists(name):
			if os.path.exists(name):
				sh.rm("-rf", name)

		rm_if_exists(LOGSTAR)
		rm_if_exists(CHECKPATCHLOG)
		rm_if_exists(APPLYPATCHLOG)
		rm_if_exists(BUILDPATCHLOG)
		rm_if_exists(TESTPATCHLOG)

	def _create_tar(self):
		arc = tarfile.open(LOGSTAR, "w|gz")

		def add_if_exists(name):
			if os.path.exists(name):	
				arc.add(name, os.path.basename(name))

		add_if_exists(CHECKPATCHLOG)
		add_if_exists(APPLYPATCHLOG)
		add_if_exists(BUILDPATCHLOG)
		add_if_exists(TESTPATCHLOG)

		arc.close()

	def _check_patch(self):
		try:
			cmd = sh.Command(CHECKPATCHCMD)
			cmd("--no-tree", PATCHNAME, _out=CHECKPATCHLOG)
			self._msg += "Patch respects coding style.\n"
		except:
			self._msg += "Patch doesn't respect coding style.\n"
		finally:
			self.logger.debug(self._msg)

	def _apply_patch(self):
		ret = True

		try:
			sh.git("am", PATCHNAME, _out = APPLYPATCHLOG, _err = APPLYPATCHLOG)
			self._msg += "Patch applies successfully.\n"
		except:
			self._msg += "Patch fails to apply.\n"
			self._send_report(False)
			ret = False
		finally:
			self.logger.debug(self._msg)

		return ret

	def _build_patch(self):
		ret = True

		try:
			sh.make("-j3", _out = BUILDPATCHLOG, _err = BUILDPATCHLOG)
			self._msg += "Patch builds successfully.\n"
		except:
			self._msg += "Patch fails to build."
			self._send_report(False)
			ret = False
		finally:
			self.logger.debug(self._msg)

		return ret

	def _test_patch(self):
		ret = True

		try:
			cmd = sh.Command("./test/zdtm.py")
			cmd("run", "--all", "--report", "report", "--parallel", "3", "-x", "pty01", "-x", "cgroup02", _out = TESTPATCHLOG, _err = TESTPATCHLOG)
			#sh.make("test", "-j3", _out = TESTPATCHLOG, _err = TESTPATCHLOG)
			self._msg += "Patch passes tests successfully.\n"
		except:
			self._msg += "Patch fails to pass tests.\n"
			self._send_report(False)
			ret = False
		finally:
			self.logger.debug(self._msg)

		return ret

	def _test_patches(self):
		self.logger.debug(str(self._patches.keys()))

		for mid in self._patches.keys():
			self.logger.debug("Checking patch/patchset with message-id %s" % mid)

			full = True
			for n in self._patches[mid]:
				if not self._patches[mid][n]:
					self.logger.debug("Patch set lacks patch no %d" % n)
					full = False
					break

			if not full:
				continue

			with pushd():
				self._repo_prepare()

				for n in self._patches[mid]:
					if n == 0:
						continue

					self._patch = self._patches[mid][n]
					self._msg = ""

					self._create_patchfile()
					self._clear_logs()

					# Check coding style. It is not vital, so don't
					# fail on it right away.
					self._check_patch()
					# Check if patch applies.
					if not self._apply_patch():
						break
					# Check if patch builds.
					if not self._build_patch():
						break
					# Check if patch passes tests.
					if not self._test_patch():
						break

					self._send_report(True)
					self.logger.debug(self._msg)

				self._patches.pop(mid)

	def _find_patches(self):
		result, data = self.mail.uid('search', None, "UnSeen")
		uids = data[0].split()

		self.logger.debug("Have %d new messages", len(uids))

		regex = '^(%s)?\s*\[PATCH\s*((\d+)/(\d+))?\]' % re.escape(self.prefix)
		self.logger.debug("regex: %s" % regex)

		p = re.compile(regex)
		for uid in uids:
			result, data = self.mail.uid('fetch', uid, '(RFC822)')
			text = data[0][1]

			headers = Parser().parsestr(text)

			self.logger.debug("Subject: %s." % headers['subject'])

			result = p.match(headers['subject'])
			if not result and not headers['subject'].startswith('[CRIU] [PATCH'):
				self.logger.debug("Doesn't look like patch")
				continue

			if result:
				patchset = True if result.group(2) else False
			else:
				patchset = False

			if patchset:
				self.logger.debug("Patch set.")
			else:
				self.logger.debug("Single patch.")
			n = int(result.group(3)) if patchset else 1
			N = int(result.group(4)) if patchset else 1
			self.logger.debug("Patch no %d/%d" % (n,N))

			mid = None
			if n == 0 or not patchset:
				mid = headers['message-id']
			elif n == 1 and patchset and ('in-reply-to' not in headers):
				mid = headers['message-id']
			elif patchset:
				mid = headers['in-reply-to']
			self.logger.debug("Message-id: %s." % mid)

			if mid not in self._patches:
				self._patches[mid] = {}

				if patchset:
					for i in xrange(N + 1):
						self._patches[mid][i] = None

			if n == 1 and patchset and ('in-reply-to' not in headers):
				self._patches[mid][0] = text

			self._patches[mid][n] = text

	def run(self):
		while not self._stopped():
			self._login()
			self._find_patches()
			self._test_patches()
			self._logout()
			time.sleep(self.timeout)

	def stop(self):
		self._stop.set()

	def _stopped(self):
		return self._stop.is_set()

if __name__ == "__main__":
	t = Tester(sys.argv)

	def signal_handler(signal, frame):
		print("Stopping malipat...")
		t.stop()
		t.join()
		sys.exit(0)
	signal.signal(signal.SIGINT, signal_handler)
	signal.signal(signal.SIGTERM, signal_handler)

	t.daemon = True
	t.start()
	signal.pause()
	t.join()
